/*
Copyright Contributors to the libdnf project.

This file is part of libdnf: https://github.com/rpm-software-management/libdnf/

Libdnf is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

Libdnf is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
*/

#include "copr.hpp"
#include "copr_repo.hpp"

#include <iostream>

namespace dnf5 {


class RepoTestCB : public CoprRepoCallback {
public:
    void operator()(const CoprRepo & cr) {
        std::cout << cr.id;
        if (cr.has_external_deps)
            std::cout << " [eternal_deps]";
        if (cr.multilib)
            std::cout << " [multilib]";
        if (!cr.enabled)
            std::cout << " (disabled)";
        std::cout << std::endl;
    };
};


static const std::string guess_project_name_from_old_repofile_name(const std::string & repo_file_basename) {
    auto output = std::regex_replace(repo_file_basename, std::regex("^_copr_"), "");
    output = std::regex_replace(output, std::regex(".repo$"), "");
    return std::regex_replace(output, std::regex("-"), "/", std::regex_constants::format_first_only);
}


static void warn_old_copr_repofile(const std::filesystem::path & repofile) {
    /// This is a very old Copr repository format we want to warn
    /// about, as it used to be defined here:
    /// https://github.com/rpm-software-management/dnf-plugins-core/blob/9905d15bfcb2df00e4a0f9ad5f40453111f8f96b/plugins/copr.py#L182-L183
    /// Even DNF4 copr.py was fixed for a long time, but e.g. the
    /// fedora-workstation-repositories.rpm still provides an old formatted
    /// repoffile.
    auto base = repofile.filename().native();
    if (!base.starts_with("_copr_"))
        return;
    warning(
        _("Copr repofile '{}' has an old format, "
          "fix by re-enabling it $ {} copr enable {}"),
        repofile.c_str(),
        dnf5_command,
        guess_project_name_from_old_repofile_name(base).c_str());
}


static bool is_copr_repofile(const std::filesystem::path & repofile) {
    return repofile.filename().native().starts_with("_copr:");
}


static std::string repo_id_to_copr_file(const std::string & repo_id) {
    /// Convert repoID (generated by Copr Frontend) to a repo filename.  Note we
    /// keep the group_ prefix for group ownernames.
    /// - copr:copr.fedorainfracloud.org:group_copr:copr-pull-requests:pr:2545
    /// + _copr:copr.fedorainfracloud.org:group_copr:copr-pull-requests:pr:2545.repo

    auto fixed_repo_id = std::regex_replace(repo_id, std::regex(":ml$"), "");
    return "_" + fixed_repo_id + ".repo";
}


static void warn_weird_copr_repo(libdnf::repo::RepoWeakPtr dnfRepo) {
    /// Throw a warning for every copr-repofile-related repo ID which doesn't
    /// follow the pre-defined format.

    std::string repo_id = dnfRepo->get_id();
    if (repo_id.starts_with("coprdep:"))
        return;

    auto repo_file_path = dnfRepo->get_repo_file_path().c_str();
    if (!repo_id.starts_with("copr:")) {
        warning(_("Repo id '{}' in '{}' is suspicious"), repo_id.c_str(), repo_file_path);
        return;
    }

    // Check that the repo filename matches the repo ID
    std::filesystem::path path = dnfRepo->get_repo_file_path();
    if (repo_id_to_copr_file(repo_id) != path.filename().native()) {
        warning(_("Repo id '{}' doesn't belong to '{}' repofile"), repo_id.c_str(), repo_file_path);
    }
}


static void installed_copr_repositories(libdnf::Base & base, CoprRepoCallback cb, const std::string & hubspec = "") {
    std::map<std::string, CoprRepo> copr_repos;

    libdnf::repo::RepoQuery query(base);
    for (const auto & repo : query.get_data()) {
        auto repo_file_path = repo->get_repo_file_path();

        warn_old_copr_repofile(repo_file_path);
        if (!is_copr_repofile(repo_file_path))
            continue;

        warn_weird_copr_repo(repo);
        copr_repos[repo_file_path].add_dnf_repo(repo);
    }

    for (const auto & [key, copr_repo] : copr_repos) {
        if (hubspec != "" && copr_repo.id.rfind(hubspec + "/", 0) != 0)
            continue;
        cb(copr_repo);
    }
}


void CoprListCommand::set_argument_parser() {
    auto & cmd = *this->get_argument_parser_command();
    auto desc = _("list Copr repositories");
    cmd.set_description(desc);
    cmd.set_long_description(desc);

    // this->installed = std::make_unique<libdnf::cli::session::BoolOption>(*this, "installed", 'i', "installed", false);

    // --installed           List all installed Copr repositories (default)
    // --enabled             List enabled Copr repositories
    // --disabled            List disabled Copr repositories
    // --available-by-user NAME
    //                       List available Copr repositories by user NAME
    // --hub HUB             Specify an instance of Copr to work with
}

void CoprListCommand::run() {
    auto & ctx = get_context();
    installed_copr_repositories(ctx.base, RepoTestCB(), copr_cmd()->hub());
}

}  // namespace dnf5
